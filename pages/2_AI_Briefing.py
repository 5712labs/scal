import streamlit as st
import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
import altair as alt
import openai
from components import convert
import feedparser
import sqlite3
from components.db_manager import DBManagerEconomic

st.set_page_config(page_title="AI DW", page_icon="üêç", layout='wide')
if convert.check_auth() == False:
    st.stop()

st.header(f"ÏùºÌïòÍ∏∞ Ï¢ãÏùÄ ÌöåÏÇ¨ 1ÏúÑ ÎåÄÏö∞Í±¥ÏÑ§ VS ÎèôÏ¢ÖÏÇ¨ üëã")

db = DBManagerEconomic()

clear_button = st.sidebar.button("Clear Cache", key="clear")
if clear_button:
    st.cache_data.clear()

progress_stock = st.progress(0) # Ï£ºÍ∞ÄÏ†ïÎ≥¥ Î°úÎî©Î∞î
status_stock = st.empty() # Ï£ºÍ∞ÄÏ†ïÎ≥¥ Î°úÎî©Î∞î

st.write(""" ### ü§ñ AI Î∏åÎ¶¨Ìïë """)
dt_today = datetime.today().strftime('%YÎÖÑ %mÏõî %dÏùº %HÏãú%MÎ∂Ñ')
with st.expander(f"{dt_today} by {st.session_state['openai_model']}", expanded=True):
    ai_stock_text = st.empty() # Ï£ºÍ∞ÄÏ†ïÎ≥¥ ChatGPT ÎãµÎ≥Ä
    anal_news = st.container()

search_date = st.sidebar.date_input("Í∏∞Ï§ÄÏùºÏûê", datetime.today())
today_button = st.sidebar.button("Today", key="today")
if today_button:
    search_date = datetime.today()

dt_range = st.sidebar.selectbox("Í∏∞Í∞Ñ",['1Ï£º', '1Í∞úÏõî', '3Í∞úÏõî', '6Í∞úÏõî', '1ÎÖÑ', '3ÎÖÑ', '10ÎÖÑ'], index=2)
if "dt_range" in st.session_state:
    if dt_range != st.session_state["dt_range"]:
        st.session_state["dt_range"] = dt_range
        st.cache_data.clear()
else:
    st.session_state["dt_range"] = dt_range

end_date = search_date
if dt_range == '1Ï£º':
    start_date = datetime.today() - relativedelta(weeks=1)
elif dt_range == '1Í∞úÏõî':
    start_date = datetime.today() - relativedelta(months=1)
elif dt_range == '3Í∞úÏõî':
    start_date = end_date - relativedelta(months=3)
elif dt_range == '6Í∞úÏõî':    
    start_date = datetime.today() - relativedelta(months=6)
elif dt_range == '1ÎÖÑ':    
    start_date = datetime.today() - relativedelta(years=1)
elif dt_range == '3ÎÖÑ':    
    start_date = datetime.today() - relativedelta(years=3)
elif dt_range == '10ÎÖÑ':    
    start_date = datetime.today() - relativedelta(years=10)

##########################################################################
### 1. Ï£ºÏöî Îâ¥Ïä§ ##########################################################
##########################################################################
def parse_pubdate(entry):
    published_dt = datetime.strptime(entry.published, '%a, %d %b %Y %H:%M:%S %Z')
    formatted_str = published_dt.strftime('%Y. %m. %d')
    return formatted_str

date_since = (datetime.now() - timedelta(3)).strftime('%Y-%m-%d')
stock_name = 'Í±¥ÏÑ§'
rss_url = f'https://news.google.com/rss/search?q={stock_name}+after:{date_since}&hl=ko&gl=KR&ceid=KR%3Ako'
feeds = feedparser.parse(rss_url)
sorted_feeds = sorted(feeds.entries, key=parse_pubdate, reverse=True)

cols = anal_news.columns(5)
for idx, feed in enumerate(sorted_feeds[:10]): 
    pub_date = parse_pubdate(feed)
    colsnum = ( idx % 5 )
    with cols[colsnum]:
        st.link_button(feed.title + f' {pub_date}', feed.link)

##########################################################################
### 1. Ï£ºÏöî Í≤ΩÏ†úÏßÄÌëú ######################################################
##########################################################################
status_Text = '1/3 Ï£ºÏöî ÏßÄÌëúÎ•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§...'
progress_stock.progress(0)
status_stock.text(f"{status_Text}")
products = [
    {'name': 'Îã¨Îü¨Ïù∏Îç±Ïä§', 'symbol': 'DX-Y.NYB'}
    ]
multi_products = st.sidebar.multiselect(
    "ÏßÄÌëúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
    [
        "ÌÅ¨Î£®ÎìúÏò§Ïùº CL=F",
        "Í∏à GC=F",
        "ÏùÄ SI=F",
        # "Íµ¨Î¶¨ GH=F",
        "S&P500 ^GSPC",
        "Ï≤úÏó∞Í∞ÄÏä§ LNG",
        "10ÎÖÑÎ¨º ^TNX",
        "DBC DBC"
        # "BTC-USD BTC-USD"
        ],
    [ #Ï¥àÍ∏∞ ÏÑ†ÌÉù
        "ÌÅ¨Î£®ÎìúÏò§Ïùº CL=F",
        "Í∏à GC=F",
        "ÏùÄ SI=F",
        # "Íµ¨Î¶¨ GH=F",
        "S&P500 ^GSPC",
        "Ï≤úÏó∞Í∞ÄÏä§ LNG",
        "10ÎÖÑÎ¨º ^TNX",
        "DBC DBC"
        # "BTC-USD BTC-USD"
        ]
    )
for product in multi_products:
    words = product.split()
    products.append({'name': words[0], 'symbol': words[1]})

@st.cache_data
def load_eco_data(products):
    change_eco_df = pd.DataFrame() # Î≥ÄÎèôÎ•†
    last_df = pd.DataFrame() # Î≥ÄÎèôÎ•†    
    for idx, product in enumerate(products):

        get_product_data = yf.Ticker(product['symbol'])
        product_df = get_product_data.history(period='1d', start=start_date, end=end_date)

        # try: # Ï†ÄÏû•Îêú Ïù¥Î†•Ïù¥ Í∞ÄÏ†∏Ïò§Í∏∞
        #     product_df = db.get_eco(product['symbol'], start_date, end_date) # Í≤ΩÏ†úÏßÄÌëú Î∂àÎü¨Ïò§Í∏∞
        #     st.write('try')
        #     st.write(product_df)
        # except:
        #     get_product_data = yf.Ticker(product['symbol'])
        #     product_df = get_product_data.history(period='1d', start=start_date, end=end_date)
        #     st.write('except')
        #     st.write(product_df)
        #     db.save_eco(product['symbol'], product_df) # Í≤ΩÏ†úÏßÄÌëú Ï†ÄÏû•

        # st.write(product_df)
        # st.write (product_df.dtypes)
        # st.stop()

        # ÏùºÍ∞ÑÎ≥ÄÎèôÎ•†, ÎàÑÏ†ÅÌï©Í≥Ñ
        product_df['dpc'] = (product_df.Close/product_df.Close.shift(1)-1)*100
        product_df['cs'] = round(product_df.dpc.cumsum(), 2)

        change2_df = pd.DataFrame(
            {
                'Date2': product_df.index,
                'symbol': product['name'],
                'Close': round(product_df.Close, 2),
                'rate': product_df.cs,
                }
        )
        change2_df.reset_index(drop=True, inplace=True)
        change2_df.columns = ['Date', 'symbol', 'Close', 'rate']
        change_eco_df = pd.concat([change_eco_df, change2_df])

        last2_df = pd.DataFrame(product_df.iloc[len(product_df.index)-1]).T
        last3_df = pd.DataFrame(
            {
                'symbol': product['name'],
                'Date': last2_df.index,
                'Close': last2_df.Close, 
                'rate': last2_df.cs,
                }
        )
        last_df = pd.concat([last_df, last3_df])
    return change_eco_df, last_df

change_eco_df, last_df = load_eco_data(products)




# st.write(f""" ### üìà Ï£ºÏöîÏßÄÌëú {dt_range} Î≥ÄÎèôÎ•† """)
base = alt.Chart(change_eco_df).encode(x='Date:T')
columns = sorted(change_eco_df.symbol.unique())
selection = alt.selection_point(
    fields=['Date'], nearest=True, on='mouseover', empty=False, clear='mouseout'
)
lines_eco = base.mark_line().encode(
    x = alt.X('Date:T', title=''),
    y = alt.Y('rate:Q', title=''),
    color = alt.Color('symbol:N', title='ÏßÄÌëú', legend=alt.Legend(
        orient='bottom', 
        direction='horizontal',
        titleAnchor='end'))
)
points_eco = lines_eco.mark_point().transform_filter(selection)

rule_eco = base.transform_pivot(
    'symbol', value='Close', groupby=['Date']
    ).mark_rule().encode(
    opacity=alt.condition(selection, alt.value(0.3), alt.value(0)),
    tooltip=[alt.Tooltip(c, type='quantitative') for c in columns]
).add_params(selection)

text_data = last_df
text_data.reset_index(drop=True, inplace=True)
text_sort_eco = text_data.sort_values(by=['rate'], ascending=False)
text_sort_eco.reset_index(drop=True, inplace=True)
text_data3 = pd.DataFrame(text_sort_eco.loc[0]).T
if len(text_sort_eco.index) > 1:
    text_data3.loc[1] = text_sort_eco.loc[len(text_sort_eco.index)-1]
if len(text_sort_eco.index) > 2:
    text_data3.loc[2] = text_sort_eco.loc[round(len(text_sort_eco.index)/2)]

labels_eco = alt.Chart(text_data3).mark_text(
    # point=True,
    fontWeight=600,
    fontSize=15,
    # color='white',
    align='left',
    dx=15,
    dy=-8
).encode(
    x = alt.X('Date:T', title=''),
    # y = alt.Y('rate:Q', title=rate_text),
    y = alt.Y('rate:Q', title=''),
    # y = 'rate:Q',
    text=alt.Text('rate:Q', format='.1f'),
    color = alt.Color('symbol:N', title='')
)

labels2_eco = alt.Chart(text_data3).mark_text(
    # point=True,
    fontWeight=600,
    fontSize=15,
    # color='white',
    align='left',
    dx=15,
    dy=10
).encode(
    x = alt.X('Date:T', title=''),
    # y = alt.Y('rate:Q', title=rate_text),
    y = alt.Y('rate:Q', title=''),
    text=alt.Text('symbol:N', title=''),
    color = alt.Color('symbol:N', title='')
)

# st.altair_chart(lines_eco + rule_eco + points_eco + labels_eco + labels2_eco, 
#                 use_container_width=True)

##########################################################################
### 2. ÌôòÏú® Ï†ïÎ≥¥ #########################################################
##########################################################################
status_Text = '2/3 ÌôòÏú® Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§...'
progress_stock.progress(0)
status_stock.text(f"{status_Text}")
currencies = [
    {'name': ' USD/KRW', 'symbol': 'KRW=X'}
    ]
multi_currencies = st.sidebar.multiselect(
    "ÌÜµÌôîÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
    [
        'USD/AED AED=X', 
        # 'USD/AUD AUD=X', ÎØ∏ÏÇ¨Ïö©
        'USD/BWP BWP=X',
        # 'USD/CAD CAD=X', ÎØ∏ÏÇ¨Ïö©
        # 'USD/CHF CHF=X', ÎØ∏ÏÇ¨Ïö©
        'USD/CNY CNY=X',
        'USD/COP COP=X',
        'USD/DZD DZD=X',
        'USD/ETB ETB=X',
        'USD/HKD HKD=X',
        'USD/IDR IDR=X',
        'USD/INR INR=X',
        'USD/IRR IRR=X',
        'USD/JOD JOD=X',
        'USD/JPY JPY=X',
        'USD/LYD LYD=X',
        'USD/MAD MAD=X',
        'USD/MYR MYR=X',
        'USD/MZN MZN=X',
        'USD/NGN NGN=X',
        'USD/OMR OMR=X',
        'USD/PGK PGK=X',
        'USD/QAR QAR=X',
        'USD/SAR SAR=X',
        'USD/SGD SGD=X',
        # 'USD/VED VED=X', ÎØ∏ÏÇ¨Ïö©
        'USD/VND VND=X',
        'USD/ZAR ZAR=X',
        # 'USD/ZMK ZMK=X', ÎØ∏ÏÇ¨Ïö©
        'USD/ZMW ZMW=X'
        ],
    [ #Ï¥àÍ∏∞ ÏÑ†ÌÉù
         'USD/AED AED=X', 
        # 'USD/AUD AUD=X', ÎØ∏ÏÇ¨Ïö©
        # 'USD/BWP BWP=X',
        # 'USD/CAD CAD=X', ÎØ∏ÏÇ¨Ïö©
        # 'USD/CHF CHF=X', ÎØ∏ÏÇ¨Ïö©
        'USD/CNY CNY=X',
        # 'USD/COP COP=X',
        # 'USD/DZD DZD=X',
        # 'USD/ETB ETB=X',
        # 'USD/HKD HKD=X',
        # 'USD/IDR IDR=X',
        # 'USD/INR INR=X',
        'USD/IRR IRR=X',
        # 'USD/JOD JOD=X',
        'USD/JPY JPY=X',
        'USD/LYD LYD=X',
        # 'USD/MAD MAD=X',
        'USD/MYR MYR=X',
        # 'USD/MZN MZN=X',
        'USD/NGN NGN=X',
        # 'USD/OMR OMR=X',
        # 'USD/PGK PGK=X',
        'USD/QAR QAR=X',
        'USD/SAR SAR=X',
        'USD/SGD SGD=X',
        # 'USD/VED VED=X', ÎØ∏ÏÇ¨Ïö©
        'USD/VND VND=X',
        # 'USD/ZAR ZAR=X',
        # 'USD/ZMK ZMK=X', ÎØ∏ÏÇ¨Ïö©
        'USD/ZMW ZMW=X'
        ]
    )
for currency in multi_currencies:
    words = currency.split()
    currencies.append({'name': words[0], 'symbol': words[1]})

@st.cache_data
def load_cur_data(currencies):
    change_cur_df = pd.DataFrame() # Î≥ÄÎèôÎ•†
    last_cur_df = pd.DataFrame() # Î≥ÄÎèôÎ•†

    for idx, currency in enumerate(currencies):

        get_currency_data = yf.Ticker(currency['symbol'])
        currency_df = get_currency_data.history(period='1d', start=start_date, end=end_date)
        # ÏùºÍ∞ÑÎ≥ÄÎèôÎ•†, ÎàÑÏ†ÅÌï©Í≥Ñ
        currency_df['dpc'] = (currency_df.Close/currency_df.Close.shift(1)-1)*100
        currency_df['cs'] = round(currency_df.dpc.cumsum(), 2)
        change2_df = pd.DataFrame(
            {
                'symbol': currency['name'],
                'Close': round(currency_df.Close, 2),
                'rate': currency_df.cs,
                }
        )
        change2_df.reset_index(drop=False, inplace=True)
        change_cur_df = pd.concat([change_cur_df, change2_df])

        last2_df = pd.DataFrame(currency_df.iloc[len(currency_df.index)-1]).T
        last3_df = pd.DataFrame(
            {
                'symbol': currency['name'],
                'Date': last2_df.index,
                'Close': last2_df.Close, 
                'rate': last2_df.cs,
                }
        )
        last_cur_df = pd.concat([last_cur_df, last3_df])

change_cur_df, last_cur_df = load_eco_data(currencies)

# st.write(f""" ### üìà Ï£ºÏöîÌôòÏú® {dt_range} Î≥ÄÎèôÎ•† """)
base = alt.Chart(change_cur_df).encode(x='Date:T')
columns = sorted(change_cur_df.symbol.unique())
selection = alt.selection_point(
    fields=['Date'], nearest=True, on='mouseover', empty=False, clear='mouseout'
)
# lines = base.mark_line().encode(y='rate:Q', color='symbol:N')
lines_curr = base.mark_line().encode(
    x = alt.X('Date:T', title=''),
    y = alt.Y('rate:Q', title=''),
    color = alt.Color('symbol:N', title='ÏßÄÌëú', legend=alt.Legend(
        orient='bottom', 
        direction='horizontal',
        titleAnchor='end'))
)
points_curr = lines_curr.mark_point().transform_filter(selection)

rule_curr = base.transform_pivot(
    'symbol', value='Close', groupby=['Date']
    ).mark_rule().encode(
    opacity=alt.condition(selection, alt.value(0.3), alt.value(0)),
    tooltip=[alt.Tooltip(c, type='quantitative') for c in columns]
).add_params(selection)

text_data = last_cur_df
text_data.reset_index(drop=True, inplace=True)
text_sort_cur = text_data.sort_values(by=['rate'], ascending=False)
text_sort_cur.reset_index(drop=True, inplace=True)
text_data3 = pd.DataFrame(text_sort_cur.loc[0]).T
if len(text_sort_cur.index) > 1:
    text_data3.loc[1] = text_sort_cur.loc[len(text_sort_cur.index)-1]

labels_curr = alt.Chart(text_data3).mark_text(
    # point=True,
    fontWeight=600,
    fontSize=15,
    # color='white',
    align='left',
    dx=15,
    dy=-8
).encode(
    x = alt.X('Date:T', title=''),
    # y = alt.Y('rate:Q', title=rate_text),
    y = alt.Y('rate:Q', title=''),
    # y = 'rate:Q',
    text=alt.Text('rate:Q', format='.1f'),
    color = alt.Color('symbol:N', title='')
)

labels2_curr = alt.Chart(text_data3).mark_text(
    # point=True,
    fontWeight=600,
    fontSize=15,
    # color='white',
    align='left',
    dx=15,
    dy=10
).encode(
    x = alt.X('Date:T', title=''),
    # y = alt.Y('rate:Q', title=rate_text),
    y = alt.Y('rate:Q', title=''),
    text=alt.Text('symbol:N', title=''),
    color = alt.Color('symbol:N', title='')
)

# st.altair_chart(lines_curr + rule_curr + points_curr + labels_curr + labels2_curr, 
#                 use_container_width=True)

##########################################################################
### 3. ÎèôÏ¢ÖÏÇ¨ Ï£ºÍ∞Ä Î≥ÄÎèô ###################################################
##########################################################################
status_Text = '3/3 Ï£ºÍ∞Ä Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§...'
progress_stock.progress(0)
status_stock.text(f"{status_Text}")
stocks = [
    {'name': ' ÎåÄÏö∞Í±¥ÏÑ§', 'symbol': '047040.KS'}
    ]
multi_stocks = st.sidebar.multiselect(
    "ÎèôÏ¢ÖÏÇ¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
    [
        # "Ïù∏ÏÑ†Ïù¥ÏóîÌã∞ 060150.KQ",
        # "ÏΩîÏõ®Ïù¥ 021240.KS",
        "ÏÇºÏÑ±Î¨ºÏÇ∞ 028260.KS",
        "ÌòÑÎåÄÍ±¥ÏÑ§ 000720.KS",
        "DLÏù¥Ïï§Ïî® 375500.KS",
        "GSÍ±¥ÏÑ§ 006360.KS",
        "ÏÇºÏÑ±ÏóîÏßÄÎãàÏñ¥ÎßÅ 028050.KS",
        "HDCÌòÑÎåÄÏÇ∞ÏóÖÍ∞úÎ∞ú 294870.KS",
        "Í∏àÌò∏Í±¥ÏÑ§ 002990.KS"
        ],
    [ #Ï¥àÍ∏∞ ÏÑ†ÌÉù
        # "Ïù∏ÏÑ†Ïù¥ÏóîÌã∞ 060150.KQ",
        # "ÏΩîÏõ®Ïù¥ 021240.KS",
        # "ÏÇºÏÑ±Î¨ºÏÇ∞ 028260.KS",
        "HDCÌòÑÎåÄÏÇ∞ÏóÖÍ∞úÎ∞ú 294870.KS",
        "GSÍ±¥ÏÑ§ 006360.KS",
        "ÌòÑÎåÄÍ±¥ÏÑ§ 000720.KS",
        "DLÏù¥Ïï§Ïî® 375500.KS"
        ]
    )
for stock in multi_stocks:
    words = stock.split()
    stocks.append({'name': words[0], 'symbol': words[1]})

@st.cache_data
def load_stock_data(stocks):
    change_stocks_df = pd.DataFrame() # Ï£ºÍ∞Ä Î≥ÄÎèôÎ•†
    info_stock_df = pd.DataFrame() # Ï£ºÍ∞Ä Î≥ÄÎèôÎ•†

    for i, stock in enumerate(stocks):
        get_stock_data = yf.Ticker(stock['symbol'])
        stock_df = get_stock_data.history(period='1d', start=start_date, end=end_date)
        # ÏùºÍ∞ÑÎ≥ÄÎèôÎ•†, ÎàÑÏ†ÅÌï©Í≥Ñ
        stock_df['dpc'] = (stock_df.Close/stock_df.Close.shift(1)-1)*100
        stock_df['cs'] = round(stock_df.dpc.cumsum(), 2)
        change2_df = pd.DataFrame(
            {
                'symbol': stock['name'],
                # 'Close': round(stock_df.Close, 2)[0],
                'Close': round(stock_df['Close'], 2).iloc[0],
                'rate': stock_df.cs,
                }
        )

        change2_df.reset_index(drop=False, inplace=True)
        change_stocks_df = pd.concat([change_stocks_df, change2_df])

        info_stock_df[stock['name']] = [
            get_stock_data.info['marketCap'],
            convert.get_kor_amount_string_no_change(get_stock_data.info['marketCap'], 3),
            get_stock_data.info['recommendationKey'],
            get_stock_data.info['currentPrice'],
            # convert.get_kor_amount_string_no_change(get_stock_data.info['currentPrice'], 1),
            get_stock_data.info['totalCash'], # Ï¥ùÌòÑÍ∏àÏï°
            convert.get_kor_amount_string_no_change(get_stock_data.info['totalCash'], 3),
            get_stock_data.info['totalDebt'], # Ï¥ùÎ∂ÄÏ±ÑÏï°
            get_stock_data.info['totalRevenue'], # Ï¥ùÎß§Ï∂úÏï°
            get_stock_data.info.get('grossProfits', 0), # Îß§Ï∂úÏ¥ùÏù¥Ïùµ
            # convert.get_kor_amount_string_no_change(get_stock_data.info.get('grossProfits', '')),
            get_stock_data.info['operatingMargins'] * 100, # ÏòÅÏóÖÏù¥ÏùµÎ•†
            round(change_stocks_df[-1:].iloc[0]['rate'], 1), # Î≥ÄÎèôÎ•†
            '']
        rate_text = f'{dt_range}Î≥ÄÎèôÎ•†'
        info_stock_df.index = [
            'ÏãúÍ∞ÄÏ¥ùÏï°', 
            'ÏãúÍ∞ÄÏ¥ùÏï°(Ïñµ)', 
            'Îß§ÏàòÏùòÍ≤¨', 
            'ÌòÑÏû¨Í∞Ä', 
            'Ï¥ùÌòÑÍ∏àÏï°',
            'Ï¥ùÌòÑÍ∏àÏï°(Ïñµ)',
            'Ï¥ùÎ∂ÄÏ±ÑÏï°',
            'Ï¥ùÎß§Ï∂úÏï°',
            'Îß§Ï∂úÏ¥ùÏù¥Ïùµ', 
            # 'Îß§Ï∂úÏ¥ùÏù¥Ïùµ(Ïñµ)', 
            'ÏòÅÏóÖÏù¥ÏùµÎ•†',
        #    'ÏàúÏù¥ÏùµÎ•†',
            rate_text,
            'ÎπÑÍ≥†'
            ]

    return change_stocks_df, info_stock_df

change_stocks_df, info_stock_df = load_stock_data(stocks)
status_stock.empty()
progress_stock.empty()

# st.write(f""" ### üöÄ ÎèôÏ¢ÖÏÇ¨ {dt_range} Î≥ÄÎèôÎ•† """)

base = alt.Chart(change_stocks_df).encode(x='Date:T')
columns = sorted(change_stocks_df.symbol.unique())
selection = alt.selection_point(
    fields=['Date'], nearest=True, on='mouseover', empty=False, clear='mouseout'
)
# lines = base.mark_line().encode(y='rate:Q', color='symbol:N')
lines_stock = base.mark_line().encode(
    x = alt.X('Date:T', title=''),
    y = alt.Y('rate:Q', title=''),
    color = alt.Color('symbol:N', title='ÎèôÏ¢ÖÏÇ¨', legend=alt.Legend(
        orient='bottom', 
        direction='horizontal',
        titleAnchor='end'))
)
points_stock = lines_stock.mark_point().transform_filter(selection)

rule_stock = base.transform_pivot(
    'symbol', value='Close', groupby=['Date']
    ).mark_rule().encode(
    opacity=alt.condition(selection, alt.value(0.3), alt.value(0)),
    tooltip=[alt.Tooltip(c, type='quantitative') for c in columns]
).add_params(selection)

text_data = change_stocks_df.groupby('symbol', as_index=False).nth(-1)
text_data.reset_index(drop=True, inplace=True)
text_sort_stock = text_data.sort_values(by=['rate'], ascending=True)
text_sort_stock.reset_index(drop=True, inplace=True)
text_data3 = pd.DataFrame(text_data.loc[0]).T
# ÎåÄÏö∞Í±¥ÏÑ§Îßå ÎÇ®Í∏∞Í≥† ÏÇ≠Ï†ú
# if len(text_sort_stock.index) > 1:
#     text_data3.loc[1] = text_sort_stock.loc[0]
# if len(text_sort_stock.index) > 2:
#     text_data3.loc[2] = text_sort_stock.loc[round(len(text_data3.index)/2)]

labels_stock = alt.Chart(text_data3).mark_text(
    # point=True,
    fontWeight=600,
    fontSize=15,
    # color='white',
    align='left',
    dx=15,
    dy=-10
).encode(
    x = alt.X('Date:T', title=''),
    # y = alt.Y('rate:Q', title='Î≥ÄÎèôÎ•†'),
    y = alt.Y('rate:Q', title=''),
    # y = 'rate:Q',
    text=alt.Text('rate:Q', format='.1f'),
    color = alt.Color('symbol:N', title='')
)

labels2_stock = alt.Chart(text_data3).mark_text(
    # point=True,
    fontWeight=600,
    fontSize=15,
    # color='white',
    align='left',
    dx=15,
    dy=8
).encode(
    x = alt.X('Date:T', title=''),
    # y = alt.Y('rate:Q', title=rate_text),
    y = alt.Y('rate:Q', title=''),
    # y = 'rate:Q',
    text=alt.Text('symbol:N'),
    color = alt.Color('symbol:N', title='')
)
# st.altair_chart(lines_stock + rule_stock + points_stock + labels_stock + labels2_stock, 
#                 use_container_width=True)

##########################################################################
### 4. ÏãúÍ∞ÄÏ¥ùÏï° Î∞îÏ∞®Ìä∏ Í∑∏Î¶¨Í∏∞ ##############################################
##########################################################################
# st.write(""" ### üéôÔ∏è ÏãúÍ∞ÄÏ¥ùÏï° """)
# cap_df = info_stock_df.T
cap_df = info_stock_df.iloc[[0, 1]].T #ÏãúÍ∞ÄÏ¥ùÏï°, ÏãúÍ∞ÄÏ¥ùÏï°(Ïñµ)
cap_df.reset_index(drop=False, inplace=True)
cap_df.rename(columns={'index': 'Ï¢ÖÎ™©Î™Ö'}, inplace=True)
bar_chart = alt.Chart(cap_df, title='').mark_bar().encode(
                x = alt.X('ÏãúÍ∞ÄÏ¥ùÏï°:Q', title='', axis=alt.Axis(labels=False)),
                y = alt.Y('Ï¢ÖÎ™©Î™Ö:O', title=''),
                color = alt.Color('Ï¢ÖÎ™©Î™Ö:N', title='Ï¢ÖÎ™©', legend=None)   
            )

bar_text = alt.Chart(cap_df).mark_text(
    fontWeight=600,
    fontSize=14,
    align='left',
    dx=10,
    dy=1
    ).transform_calculate(
    text_mid = '(datum.b/2)').encode(
                x=alt.X('ÏãúÍ∞ÄÏ¥ùÏï°:Q', title='', axis=alt.Axis(labels=False)),
                y=alt.Y('Ï¢ÖÎ™©Î™Ö:O'),
                # detail='TERMS:N',
                # text=alt.Text('ÏãúÍ∞ÄÏ¥ùÏï°:Q', format='.0f')
                color = alt.Color('Ï¢ÖÎ™©Î™Ö:N', title=''),
                text=alt.Text('ÏãúÍ∞ÄÏ¥ùÏï°(Ïñµ):N')
            )
# st.altair_chart(bar_chart + bar_text, use_container_width=True)

col1, col2 = st.columns(2)
with col1:
    st.write(f""" ### üìà Ï£ºÏöîÏßÄÌëú {dt_range} Î≥ÄÎèôÎ•† """)
    st.altair_chart(lines_eco + rule_eco + points_eco + labels_eco + labels2_eco, 
                    use_container_width=True)
with col2:
    st.write(f""" ### üìà Ï£ºÏöîÌôòÏú® {dt_range} Î≥ÄÎèôÎ•† """)
    st.altair_chart(lines_curr + rule_curr + points_curr + labels_curr + labels2_curr, 
                    use_container_width=True)

col3, col4 = st.columns(2)
with col3:
    st.write(f""" ### üöÄ ÎèôÏ¢ÖÏÇ¨ {dt_range} Î≥ÄÎèôÎ•† """)
    st.altair_chart(lines_stock + rule_stock + points_stock + labels_stock + labels2_stock, 
                    use_container_width=True)
with col4:
    st.write(""" ### üéôÔ∏è ÏãúÍ∞ÄÏ¥ùÏï° """)
    st.altair_chart(bar_chart + bar_text, use_container_width=True)
    info_stock_dft = info_stock_df.T

##########################################################################
### 5. AI Í≤ΩÏ†úÏßÄÌëú Î∏åÎ¶¨Ìïë ##################################################
##########################################################################

sys_msg = '''
You're an economist like legendary investors Charlie Munger and Warren Buffett
'''
chatGPT_msg = [{'role': 'system', 'content': sys_msg}]

userq = '''
#task
I'll give you an article. please remember it for following requests.
summarize the above article with one sentence.
Please answer in Korean based on the following [context] [Persona] [Format] [Tone] [article]

#context
- Tell me the impact on the economy compared to past cases
- Tell me the correlation between economic indicators as well

#Persona
I want you to act as an investment guru  Charlie Munger and Warren Buffett.

#Format
Explain in simple terms

#Tone
Give me a clear and polite answer

#article
'''

userq += 'Í±∞ÏãúÍ≤ΩÏ†ú ÏßÄÌëú \n'
userq += f'ÏßÄÌëú ÌòÑÏû¨Í∞Ä {dt_range}Î≥ÄÎèôÎ•†''\n'
text_sort_eco.columns = ['ÏßÄÌëú', 'ÏùºÏûê', 'ÌòÑÏû¨Í∞Ä', f'{dt_range}Î≥ÄÎèôÎ•†']
text_sort_eco.index = text_sort_eco['ÏßÄÌëú']
text_sort_eco.drop(['ÏßÄÌëú'], axis=1, inplace=True)

for index, row in text_sort_eco.iterrows():
    Close = str(round(row['ÌòÑÏû¨Í∞Ä']))
    rate = str(round(row[f'{dt_range}Î≥ÄÎèôÎ•†'], 2))
    userq = userq + ' ' + index + ' ' + Close + " " + rate + ' ' + '\n'

user_message = {'role': 'user', 'content': f"{userq}"}

##########################################################################
### 3-2 AI ÎèôÏ¢ÖÏÇ¨ ÎπÑÍµê ######################################################
##########################################################################
chat_df = info_stock_df.T # Ï£ºÍ∞ÄÏ†ïÎ≥¥Îäî ÎåÄÌôîÏóêÏÑú Ï†úÏô∏Ìï®
chat_df.drop(['ÏãúÍ∞ÄÏ¥ùÏï°'], axis=1, inplace=True)

# # Ïù¥Ïñ¥ÏÑú ÏûëÏÑ±
# userq += '\n'
# userq += 'Í±¥ÏÑ§ÌöåÏÇ¨ Ï£ºÍ∞ÄÏ†ïÎ≥¥ \n'
# userq += f'ÌöåÏÇ¨Î™Ö ÌòÑÏû¨Í∞Ä Îß§ÏàòÏùòÍ≤¨ ÏãúÍ∞ÄÏ¥ùÏï° {dt_range}Î≥ÄÎèôÎ•†\n'
# # DataFrameÏùò Í∞Å ÌñâÏùÑ ChatCompletion messagesÏóê Ï∂îÍ∞Ä
# rate_text = f'{dt_range}Î≥ÄÎèôÎ•†'
# for index, row in chat_df.iterrows():
#     userq += index + ' ' + str(round(row['ÌòÑÏû¨Í∞Ä'])) + ' ' + row['Îß§ÏàòÏùòÍ≤¨'] + ' ' 
#     userq += row['ÏãúÍ∞ÄÏ¥ùÏï°(Ïñµ)'] + ' ' + str(row[rate_text]) + ' ' + '\n' 

user_message = {'role': 'user', 'content': f"{userq}"}
chatGPT_msg.extend([user_message])

streamText = ''
# get_respense = openai.chat.completions.create(
#     model=st.session_state["openai_model"],
#     messages = chatGPT_msg,
#     # max_tokens = chatGPT_max_tokens,
#     # temperature=0,
#     stream=True,
# )

# for response in get_respense:
#     for chunk in response.choices:
#         if chunk.finish_reason == 'stop':
#             break
#         streamText += chunk.delta.content
#     if streamText is not None:
#         ai_stock_text.success(f""" {streamText} """)       

user_message = {'role': 'assistant', 'content': f"{streamText}"}
chatGPT_msg.extend([user_message])

with st.expander("ÌîÑÎ°¨ÌîÑÌä∏ Î≥¥Í∏∞"):
    st.write(text_sort_eco) # Í≤ΩÏ†úÏßÄÌëú Î≥ÄÎèôÎ•†(ÏàòÏùµÎ•† ÎÜíÏùÄ Ïàú)
    st.write(chat_df)       # Ï£ºÍ∞ÄÏ†ïÎ≥¥ info_stock_df
    st.write(last_cur_df)   # ÌôòÏú®Ï†ïÎ≥¥
    st.write(chatGPT_msg)   # ChatGPT APIÏö©

st.write(change_eco_df)   # ÌôòÏú®Ï†ïÎ≥¥
st.write(last_df)   # ÌôòÏú®Ï†ïÎ≥¥

st.write(change_cur_df)   # ÌôòÏú®Ï†ïÎ≥¥
st.write(last_cur_df)   # ÌôòÏú®Ï†ïÎ≥¥

# change_cur_df.to_sql(table_name, con, if_exists='replace', index=False)

# df = pd.read_sql(f'SELECT * FROM {table_name}', con, index_col=None)
# st.write('==================')   # ÌôòÏú®Ï†ïÎ≥¥
# st.write(df)   # ÌôòÏú®Ï†ïÎ≥¥